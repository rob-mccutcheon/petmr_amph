#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sys, os
import os.path as op
import argparse
from easy_lausanne.registration import bb_regT12b0
from easy_lausanne.maskcreation import (create_annot_label, create_roi, 
                create_wm_mask, crop_and_move_datasets)
from easy_lausanne.apply_registration import apply_lin_registration
import nibabel as nib
import numpy as np


parser = argparse.ArgumentParser(prog="easy_lausanne")
parser.add_argument("--subject_id",action="store",dest="subject_id")
parser.add_argument("--target_volume",action="store",dest="target_volume")
parser.add_argument("--output_dir",action="store",dest="output_dir")
parser.add_argument("--target_type",action="store",dest="target_type")
parser.add_argument("--dsi_studio",action="store_true",dest="dsi_studio")
parser.add_argument("--include500",action="store_true",dest="run_500")
parser.add_argument("--nocompat",action="store_true",dest="nocompat")


if __name__ == "__main__":
    # Check for valid arguments
    if len(sys.argv) == 1:
        parser.print_usage()
        sys.exit(0)
    args = parser.parse_args()
    if not op.exists(args.target_volume):
        print "Fatal: target volume does not exist", args.target_volume
        sys.exit(1)
    if not op.exists(args.output_dir):
        print "Fatal: output directory does not exist", args.output_dir
        sys.exit(1)
    if not os.environ["FREESURFER_HOME"]:
        print "Fatal: no FREESURFER_HOME environment variable "
        sys.exit(1)
    if not os.environ["SUBJECTS_DIR"]:
        print "Fatal: no SUBJECTS_DIR environment variable "
        sys.exit(1)
    if not args.subject_id:
        print "Fatal: no -subject_id specified"
        sys.exit(1)
    if not op.exists(op.join(os.environ["SUBJECTS_DIR"],args.subject_id)):
        print "Fatal: no folder found for %s in %s" % (args.subject_id,
                                            os.environ["SUBJECTS_DIR"])
        sys.exit(1)
    if not args.target_type in ("bold","diffusion","anisotropy"):
        print "Fatal: -target_type mut be either bold, diffusion, or anisotropy"
        sys.exit(1)
        
    if args.dsi_studio:
        if args.target_type == "bold":
            print "WARNING: specified dsi_studio even though target_type is 'bold'"
            target_volume = args.target_volume        
        else:
            print "Creating temp nifti file for bbregister"
            bdir,fname = op.split(args.target_volume)
            target_volume = op.join(bdir,"tmp_"+fname)
            tnim = nib.load(args.target_volume)
            thdr = tnim.get_header()
            aff = tnim.get_affine()
            tdata = tnim.get_data()
            center = np.diag(aff)[:3] * np.array(tdata.shape) / 2
            new_aff = aff.copy()
            new_aff[:-1,-1] = center
            out_nim = nib.Nifti1Image(tdata,affine=new_aff)
            out_nim.to_filename(target_volume)
    else:
        target_volume = args.target_volume
        
    # register the target volume to the freesurfer orig data 
    bb_regT12b0(
                subject_id = args.subject_id, 
                target_volume = target_volume,
                output_directory = args.output_dir,
                target_type = args.target_type
                )
    
    # create the annot labels
    create_annot_label(args.subject_id,  args.run_500)
    
    # create the rois (in a volume)
    create_roi(args.subject_id)
    
    # make a wm mask
    create_wm_mask(args.subject_id, args.output_dir)
    
    # crop and move the datasets
    crop_and_move_datasets(args.subject_id, args.output_dir)
    
    # register the atlases to the target volume
    apply_lin_registration(args.subject_id,
                           args.output_dir,
                           target_volume,
                           args.run_500
                           )
    
    
